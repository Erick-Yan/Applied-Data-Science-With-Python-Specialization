{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID Household Income Bucket</th>\n",
       "      <th>Household Income Bucket</th>\n",
       "      <th>ID Year</th>\n",
       "      <th>Year</th>\n",
       "      <th>Household Income</th>\n",
       "      <th>Household Income Moe</th>\n",
       "      <th>Geography</th>\n",
       "      <th>ID Geography</th>\n",
       "      <th>Slug Geography</th>\n",
       "      <th>share</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>$30,000-$34,999</td>\n",
       "      <td>2018</td>\n",
       "      <td>2018</td>\n",
       "      <td>9175</td>\n",
       "      <td>1592.0</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "      <td>16000US0667000</td>\n",
       "      <td>san-francisco-ca</td>\n",
       "      <td>0.025288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15</td>\n",
       "      <td>$200,000+</td>\n",
       "      <td>2018</td>\n",
       "      <td>2018</td>\n",
       "      <td>103466</td>\n",
       "      <td>4308.0</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "      <td>16000US0667000</td>\n",
       "      <td>san-francisco-ca</td>\n",
       "      <td>0.285166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>&lt; $10,000</td>\n",
       "      <td>2018</td>\n",
       "      <td>2018</td>\n",
       "      <td>7598669</td>\n",
       "      <td>46912.0</td>\n",
       "      <td>United States</td>\n",
       "      <td>01000US</td>\n",
       "      <td>united-states</td>\n",
       "      <td>0.062530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13</td>\n",
       "      <td>$125,000-$149,999</td>\n",
       "      <td>2018</td>\n",
       "      <td>2018</td>\n",
       "      <td>22912</td>\n",
       "      <td>2172.0</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "      <td>16000US0667000</td>\n",
       "      <td>san-francisco-ca</td>\n",
       "      <td>0.063149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>$10,000-$14,999</td>\n",
       "      <td>2018</td>\n",
       "      <td>2018</td>\n",
       "      <td>5267344</td>\n",
       "      <td>40230.0</td>\n",
       "      <td>United States</td>\n",
       "      <td>01000US</td>\n",
       "      <td>united-states</td>\n",
       "      <td>0.043345</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID Household Income Bucket Household Income Bucket  ID Year  Year  \\\n",
       "0                           5         $30,000-$34,999     2018  2018   \n",
       "1                          15               $200,000+     2018  2018   \n",
       "2                           0               < $10,000     2018  2018   \n",
       "3                          13       $125,000-$149,999     2018  2018   \n",
       "4                           1         $10,000-$14,999     2018  2018   \n",
       "\n",
       "   Household Income  Household Income Moe          Geography    ID Geography  \\\n",
       "0              9175                1592.0  San Francisco, CA  16000US0667000   \n",
       "1            103466                4308.0  San Francisco, CA  16000US0667000   \n",
       "2           7598669               46912.0      United States         01000US   \n",
       "3             22912                2172.0  San Francisco, CA  16000US0667000   \n",
       "4           5267344               40230.0      United States         01000US   \n",
       "\n",
       "     Slug Geography     share  \n",
       "0  san-francisco-ca  0.025288  \n",
       "1  san-francisco-ca  0.285166  \n",
       "2     united-states  0.062530  \n",
       "3  san-francisco-ca  0.063149  \n",
       "4     united-states  0.043345  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1 = pd.read_csv(\"startup.csv\")\n",
    "df2 = pd.read_csv(\"sanfran_income.csv\")\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Income</th>\n",
       "      <th>Year</th>\n",
       "      <th>Number of People</th>\n",
       "      <th>Geography</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>$30,000-$34,999</td>\n",
       "      <td>2018</td>\n",
       "      <td>9175</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>$200,000+</td>\n",
       "      <td>2018</td>\n",
       "      <td>103466</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>&lt; $10,000</td>\n",
       "      <td>2018</td>\n",
       "      <td>7598669</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>$125,000-$149,999</td>\n",
       "      <td>2018</td>\n",
       "      <td>22912</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>$10,000-$14,999</td>\n",
       "      <td>2018</td>\n",
       "      <td>5267344</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>187</th>\n",
       "      <td>$60,000-$74,999</td>\n",
       "      <td>2013</td>\n",
       "      <td>25923</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188</th>\n",
       "      <td>$25,000-$29,999</td>\n",
       "      <td>2013</td>\n",
       "      <td>5905618</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>189</th>\n",
       "      <td>$35,000-$39,999</td>\n",
       "      <td>2013</td>\n",
       "      <td>10023</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>$35,000-$39,999</td>\n",
       "      <td>2013</td>\n",
       "      <td>5484000</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>&lt; $10,000</td>\n",
       "      <td>2013</td>\n",
       "      <td>25126</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>192 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                Income  Year  Number of People          Geography\n",
       "0      $30,000-$34,999  2018              9175  San Francisco, CA\n",
       "1            $200,000+  2018            103466  San Francisco, CA\n",
       "2            < $10,000  2018           7598669      United States\n",
       "3    $125,000-$149,999  2018             22912  San Francisco, CA\n",
       "4      $10,000-$14,999  2018           5267344      United States\n",
       "..                 ...   ...               ...                ...\n",
       "187    $60,000-$74,999  2013             25923  San Francisco, CA\n",
       "188    $25,000-$29,999  2013           5905618      United States\n",
       "189    $35,000-$39,999  2013             10023  San Francisco, CA\n",
       "190    $35,000-$39,999  2013           5484000      United States\n",
       "191          < $10,000  2013             25126  San Francisco, CA\n",
       "\n",
       "[192 rows x 4 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.rename(columns={'Household Income Bucket':'Income', 'Household Income':'Number of People'}, inplace=True)\n",
    "df2 = df2.filter(['Income', 'Year', 'Number of People', 'Geography'])\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Income</th>\n",
       "      <th>Year</th>\n",
       "      <th>Number of People</th>\n",
       "      <th>Geography</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>$30,000-$34,999</td>\n",
       "      <td>2018</td>\n",
       "      <td>9175</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>$200,000+</td>\n",
       "      <td>2018</td>\n",
       "      <td>103466</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>$125,000-$149,999</td>\n",
       "      <td>2018</td>\n",
       "      <td>22912</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>$100,000-$124,999</td>\n",
       "      <td>2018</td>\n",
       "      <td>28693</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>$75,000-$99,999</td>\n",
       "      <td>2018</td>\n",
       "      <td>32079</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>$15,000-$19,999</td>\n",
       "      <td>2013</td>\n",
       "      <td>12719</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>186</th>\n",
       "      <td>$200,000+</td>\n",
       "      <td>2013</td>\n",
       "      <td>58235</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>187</th>\n",
       "      <td>$60,000-$74,999</td>\n",
       "      <td>2013</td>\n",
       "      <td>25923</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>189</th>\n",
       "      <td>$35,000-$39,999</td>\n",
       "      <td>2013</td>\n",
       "      <td>10023</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>&lt; $10,000</td>\n",
       "      <td>2013</td>\n",
       "      <td>25126</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>96 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                Income  Year  Number of People          Geography\n",
       "0      $30,000-$34,999  2018              9175  San Francisco, CA\n",
       "1            $200,000+  2018            103466  San Francisco, CA\n",
       "3    $125,000-$149,999  2018             22912  San Francisco, CA\n",
       "5    $100,000-$124,999  2018             28693  San Francisco, CA\n",
       "6      $75,000-$99,999  2018             32079  San Francisco, CA\n",
       "..                 ...   ...               ...                ...\n",
       "184    $15,000-$19,999  2013             12719  San Francisco, CA\n",
       "186          $200,000+  2013             58235  San Francisco, CA\n",
       "187    $60,000-$74,999  2013             25923  San Francisco, CA\n",
       "189    $35,000-$39,999  2013             10023  San Francisco, CA\n",
       "191          < $10,000  2013             25126  San Francisco, CA\n",
       "\n",
       "[96 rows x 4 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3 = df2[df2['Geography'] != 'United States']\n",
    "df_usa = df2[df2['Geography'] == 'United States']\n",
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\python\\python37\\lib\\site-packages\\pandas\\core\\generic.py:6746: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._update_inplace(new_data)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Income</th>\n",
       "      <th>Year</th>\n",
       "      <th>Number of People</th>\n",
       "      <th>Geography</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>2018</td>\n",
       "      <td>9175</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Greater than $150,000</td>\n",
       "      <td>2018</td>\n",
       "      <td>103466</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Between $75,000 and $150,000</td>\n",
       "      <td>2018</td>\n",
       "      <td>22912</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Between $75,000 and $150,000</td>\n",
       "      <td>2018</td>\n",
       "      <td>28693</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Between $75,000 and $150,000</td>\n",
       "      <td>2018</td>\n",
       "      <td>32079</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>2013</td>\n",
       "      <td>12719</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>186</th>\n",
       "      <td>Greater than $150,000</td>\n",
       "      <td>2013</td>\n",
       "      <td>58235</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>187</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>2013</td>\n",
       "      <td>25923</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>189</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>2013</td>\n",
       "      <td>10023</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>2013</td>\n",
       "      <td>25126</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>96 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                           Income  Year  Number of People          Geography\n",
       "0               Less than $75,000  2018              9175  San Francisco, CA\n",
       "1           Greater than $150,000  2018            103466  San Francisco, CA\n",
       "3    Between $75,000 and $150,000  2018             22912  San Francisco, CA\n",
       "5    Between $75,000 and $150,000  2018             28693  San Francisco, CA\n",
       "6    Between $75,000 and $150,000  2018             32079  San Francisco, CA\n",
       "..                            ...   ...               ...                ...\n",
       "184             Less than $75,000  2013             12719  San Francisco, CA\n",
       "186         Greater than $150,000  2013             58235  San Francisco, CA\n",
       "187             Less than $75,000  2013             25923  San Francisco, CA\n",
       "189             Less than $75,000  2013             10023  San Francisco, CA\n",
       "191             Less than $75,000  2013             25126  San Francisco, CA\n",
       "\n",
       "[96 rows x 4 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def categ_name(d):\n",
    "    d['Income'].replace({'$30,000-$34,999': 'Less than $75,000',\n",
    "                          '< $10,000': 'Less than $75,000',\n",
    "                          '$10,000-$14,999': 'Less than $75,000',\n",
    "                          '$15,000-$19,999': 'Less than $75,000',\n",
    "                          '$20,000-$24,999': 'Less than $75,000',\n",
    "                          '$25,000-$29,999': 'Less than $75,000',\n",
    "                          '$35,000-$39,999': 'Less than $75,000',\n",
    "                          '$40,000-$44,999': 'Less than $75,000',\n",
    "                          '$45,000-$49,999': 'Less than $75,000',\n",
    "                          '$50,000-$59,999': 'Less than $75,000',\n",
    "                          '$55,000-$59,999': 'Less than $75,000',\n",
    "                          '$60,000-$74,999': 'Less than $75,000',\n",
    "                          '$75,000-$99,999': 'Between $75,000 and $150,000',\n",
    "                          '$100,000-$124,999': 'Between $75,000 and $150,000',\n",
    "                          '$125,000-$149,999': 'Between $75,000 and $150,000',\n",
    "                          '$150,000-$199,999': 'Greater than $150,000',\n",
    "                          '$200,000+': 'Greater than $150,000'\n",
    "                          },\n",
    "                          inplace=True)\n",
    "\n",
    "    return d\n",
    "\n",
    "categ_name(df3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\python\\python37\\lib\\site-packages\\pandas\\core\\generic.py:6746: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._update_inplace(new_data)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Income</th>\n",
       "      <th>Year</th>\n",
       "      <th>Number of People</th>\n",
       "      <th>Geography</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>2018</td>\n",
       "      <td>7598669</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>2018</td>\n",
       "      <td>5267344</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>2018</td>\n",
       "      <td>5241202</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>2018</td>\n",
       "      <td>5695642</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>2018</td>\n",
       "      <td>5222981</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>2013</td>\n",
       "      <td>6199796</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>183</th>\n",
       "      <td>Greater than $150,000</td>\n",
       "      <td>2013</td>\n",
       "      <td>5842617</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>185</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>2013</td>\n",
       "      <td>5506746</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>2013</td>\n",
       "      <td>5905618</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>2013</td>\n",
       "      <td>5484000</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>96 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Income  Year  Number of People      Geography\n",
       "2        Less than $75,000  2018           7598669  United States\n",
       "4        Less than $75,000  2018           5267344  United States\n",
       "7        Less than $75,000  2018           5241202  United States\n",
       "9        Less than $75,000  2018           5695642  United States\n",
       "12       Less than $75,000  2018           5222981  United States\n",
       "..                     ...   ...               ...            ...\n",
       "182      Less than $75,000  2013           6199796  United States\n",
       "183  Greater than $150,000  2013           5842617  United States\n",
       "185      Less than $75,000  2013           5506746  United States\n",
       "188      Less than $75,000  2013           5905618  United States\n",
       "190      Less than $75,000  2013           5484000  United States\n",
       "\n",
       "[96 rows x 4 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "categ_name(df_usa)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\python\\python37\\lib\\site-packages\\ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Income</th>\n",
       "      <th>Number of People</th>\n",
       "      <th>City</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2013</th>\n",
       "      <td>Greater than $150,000</td>\n",
       "      <td>89851</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013</th>\n",
       "      <td>Between $75,000 and $150,000</td>\n",
       "      <td>92955</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>171845</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014</th>\n",
       "      <td>Greater than $150,000</td>\n",
       "      <td>90536</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014</th>\n",
       "      <td>Between $75,000 and $150,000</td>\n",
       "      <td>102076</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>160794</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015</th>\n",
       "      <td>Between $75,000 and $150,000</td>\n",
       "      <td>93557</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015</th>\n",
       "      <td>Greater than $150,000</td>\n",
       "      <td>111058</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>152301</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016</th>\n",
       "      <td>Between $75,000 and $150,000</td>\n",
       "      <td>92224</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016</th>\n",
       "      <td>Greater than $150,000</td>\n",
       "      <td>128585</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>137894</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017</th>\n",
       "      <td>Between $75,000 and $150,000</td>\n",
       "      <td>92256</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017</th>\n",
       "      <td>Greater than $150,000</td>\n",
       "      <td>133642</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>134425</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018</th>\n",
       "      <td>Between $75,000 and $150,000</td>\n",
       "      <td>83684</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>133993</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018</th>\n",
       "      <td>Greater than $150,000</td>\n",
       "      <td>145150</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Income  Number of People               City\n",
       "Year                                                                   \n",
       "2013         Greater than $150,000             89851  San Francisco, CA\n",
       "2013  Between $75,000 and $150,000             92955  San Francisco, CA\n",
       "2013             Less than $75,000            171845  San Francisco, CA\n",
       "2014         Greater than $150,000             90536  San Francisco, CA\n",
       "2014  Between $75,000 and $150,000            102076  San Francisco, CA\n",
       "2014             Less than $75,000            160794  San Francisco, CA\n",
       "2015  Between $75,000 and $150,000             93557  San Francisco, CA\n",
       "2015         Greater than $150,000            111058  San Francisco, CA\n",
       "2015             Less than $75,000            152301  San Francisco, CA\n",
       "2016  Between $75,000 and $150,000             92224  San Francisco, CA\n",
       "2016         Greater than $150,000            128585  San Francisco, CA\n",
       "2016             Less than $75,000            137894  San Francisco, CA\n",
       "2017  Between $75,000 and $150,000             92256  San Francisco, CA\n",
       "2017         Greater than $150,000            133642  San Francisco, CA\n",
       "2017             Less than $75,000            134425  San Francisco, CA\n",
       "2018  Between $75,000 and $150,000             83684  San Francisco, CA\n",
       "2018             Less than $75,000            133993  San Francisco, CA\n",
       "2018         Greater than $150,000            145150  San Francisco, CA"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3['Number of People'] = df3['Number of People'].apply(lambda x: int(x))\n",
    "\n",
    "categ = pd.DataFrame()\n",
    "for i in range(6):\n",
    "    if categ.empty:\n",
    "        categ = df3[df3['Year'] == df3['Year'].unique()[i]].groupby('Income').agg({'Number of People': np.sum}).reset_index()\n",
    "        categ['Year'] = df3['Year'].unique()[i]\n",
    "    else:\n",
    "        tmp = df3[df3['Year'] == df3['Year'].unique()[i]].groupby('Income').agg({'Number of People': np.sum}).reset_index()\n",
    "        tmp['Year'] = df3['Year'].unique()[i]\n",
    "        categ = pd.concat([tmp, categ])\n",
    "#categ.set_index('Year', inplace=True)\n",
    "categ['City'] = df3['Geography'][0]\n",
    "categ = categ.groupby('Year').apply(pd.DataFrame.sort_values, 'Number of People')\n",
    "categ.reset_index(drop=True, inplace=True)\n",
    "categ.set_index('Year', inplace=True)\n",
    "categ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\python\\python37\\lib\\site-packages\\ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Income</th>\n",
       "      <th>Number of People</th>\n",
       "      <th>City</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2013</th>\n",
       "      <td>Between $75,000 and $150,000</td>\n",
       "      <td>28573695</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013</th>\n",
       "      <td>Greater than $150,000</td>\n",
       "      <td>11486838</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>76230500</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014</th>\n",
       "      <td>Between $75,000 and $150,000</td>\n",
       "      <td>29431649</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014</th>\n",
       "      <td>Greater than $150,000</td>\n",
       "      <td>12307240</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>75520538</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015</th>\n",
       "      <td>Between $75,000 and $150,000</td>\n",
       "      <td>30502331</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015</th>\n",
       "      <td>Greater than $150,000</td>\n",
       "      <td>13337580</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>74368339</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016</th>\n",
       "      <td>Between $75,000 and $150,000</td>\n",
       "      <td>31340794</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016</th>\n",
       "      <td>Greater than $150,000</td>\n",
       "      <td>14519953</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>72999318</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017</th>\n",
       "      <td>Between $75,000 and $150,000</td>\n",
       "      <td>32558643</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017</th>\n",
       "      <td>Greater than $150,000</td>\n",
       "      <td>15845201</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>71658974</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018</th>\n",
       "      <td>Between $75,000 and $150,000</td>\n",
       "      <td>33489789</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018</th>\n",
       "      <td>Greater than $150,000</td>\n",
       "      <td>17313711</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018</th>\n",
       "      <td>Less than $75,000</td>\n",
       "      <td>70716680</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Income  Number of People           City\n",
       "Year                                                               \n",
       "2013  Between $75,000 and $150,000          28573695  United States\n",
       "2013         Greater than $150,000          11486838  United States\n",
       "2013             Less than $75,000          76230500  United States\n",
       "2014  Between $75,000 and $150,000          29431649  United States\n",
       "2014         Greater than $150,000          12307240  United States\n",
       "2014             Less than $75,000          75520538  United States\n",
       "2015  Between $75,000 and $150,000          30502331  United States\n",
       "2015         Greater than $150,000          13337580  United States\n",
       "2015             Less than $75,000          74368339  United States\n",
       "2016  Between $75,000 and $150,000          31340794  United States\n",
       "2016         Greater than $150,000          14519953  United States\n",
       "2016             Less than $75,000          72999318  United States\n",
       "2017  Between $75,000 and $150,000          32558643  United States\n",
       "2017         Greater than $150,000          15845201  United States\n",
       "2017             Less than $75,000          71658974  United States\n",
       "2018  Between $75,000 and $150,000          33489789  United States\n",
       "2018         Greater than $150,000          17313711  United States\n",
       "2018             Less than $75,000          70716680  United States"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_usa['Number of People'] = df_usa['Number of People'].apply(lambda x: int(x))\n",
    "\n",
    "categ1 = pd.DataFrame()\n",
    "for i in range(6):\n",
    "    if categ1.empty:\n",
    "        categ1 = df_usa[df_usa['Year'] == df_usa['Year'].unique()[i]].groupby('Income').agg({'Number of People': np.sum}).reset_index()\n",
    "        categ1['Year'] = df_usa['Year'].unique()[i]\n",
    "    else:\n",
    "        tmp = df_usa[df_usa['Year'] == df_usa['Year'].unique()[i]].groupby('Income').agg({'Number of People': np.sum}).reset_index()\n",
    "        tmp['Year'] = df_usa['Year'].unique()[i]\n",
    "        categ1 = pd.concat([tmp, categ1])\n",
    "categ1.set_index('Year', inplace=True)\n",
    "categ1['City'] = 'United States'\n",
    "categ1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID Real Estate Taxes Paid</th>\n",
       "      <th>Real Estate Taxes Paid</th>\n",
       "      <th>ID Year</th>\n",
       "      <th>Year</th>\n",
       "      <th>Real Estate Taxes by Mortgage</th>\n",
       "      <th>Real Estate Taxes by Mortgage Moe</th>\n",
       "      <th>Geography</th>\n",
       "      <th>ID Geography</th>\n",
       "      <th>Slug Geography</th>\n",
       "      <th>share</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>$800 to $1,499</td>\n",
       "      <td>2018</td>\n",
       "      <td>2018</td>\n",
       "      <td>8332</td>\n",
       "      <td>1220.172119</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "      <td>16000US0667000</td>\n",
       "      <td>san-francisco-ca</td>\n",
       "      <td>0.061156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>No Real Estate Taxes Paid</td>\n",
       "      <td>2018</td>\n",
       "      <td>2018</td>\n",
       "      <td>1326</td>\n",
       "      <td>506.411888</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "      <td>16000US0667000</td>\n",
       "      <td>san-francisco-ca</td>\n",
       "      <td>0.009733</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>Less Than $800</td>\n",
       "      <td>2018</td>\n",
       "      <td>2018</td>\n",
       "      <td>10920375</td>\n",
       "      <td>55918.756969</td>\n",
       "      <td>United States</td>\n",
       "      <td>01000US</td>\n",
       "      <td>united-states</td>\n",
       "      <td>0.140530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>$2,000 to $2,999</td>\n",
       "      <td>2018</td>\n",
       "      <td>2018</td>\n",
       "      <td>8477</td>\n",
       "      <td>1296.834608</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "      <td>16000US0667000</td>\n",
       "      <td>san-francisco-ca</td>\n",
       "      <td>0.062220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>$800 to $1,499</td>\n",
       "      <td>2018</td>\n",
       "      <td>2018</td>\n",
       "      <td>12785402</td>\n",
       "      <td>66415.014462</td>\n",
       "      <td>United States</td>\n",
       "      <td>01000US</td>\n",
       "      <td>united-states</td>\n",
       "      <td>0.164531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>2</td>\n",
       "      <td>$1,500 to $1,999</td>\n",
       "      <td>2013</td>\n",
       "      <td>2013</td>\n",
       "      <td>7341688</td>\n",
       "      <td>41048.786974</td>\n",
       "      <td>United States</td>\n",
       "      <td>01000US</td>\n",
       "      <td>united-states</td>\n",
       "      <td>0.099422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>2</td>\n",
       "      <td>$1,500 to $1,999</td>\n",
       "      <td>2013</td>\n",
       "      <td>2013</td>\n",
       "      <td>4910</td>\n",
       "      <td>948.008439</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "      <td>16000US0667000</td>\n",
       "      <td>san-francisco-ca</td>\n",
       "      <td>0.038597</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>4</td>\n",
       "      <td>$3,000 or More</td>\n",
       "      <td>2013</td>\n",
       "      <td>2013</td>\n",
       "      <td>24886195</td>\n",
       "      <td>72858.254742</td>\n",
       "      <td>United States</td>\n",
       "      <td>01000US</td>\n",
       "      <td>united-states</td>\n",
       "      <td>0.337011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>1</td>\n",
       "      <td>$800 to $1,499</td>\n",
       "      <td>2013</td>\n",
       "      <td>2013</td>\n",
       "      <td>13671</td>\n",
       "      <td>1557.206794</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "      <td>16000US0667000</td>\n",
       "      <td>san-francisco-ca</td>\n",
       "      <td>0.107467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>0</td>\n",
       "      <td>Less Than $800</td>\n",
       "      <td>2013</td>\n",
       "      <td>2013</td>\n",
       "      <td>8694</td>\n",
       "      <td>1369.415204</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "      <td>16000US0667000</td>\n",
       "      <td>san-francisco-ca</td>\n",
       "      <td>0.068343</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>72 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    ID Real Estate Taxes Paid     Real Estate Taxes Paid  ID Year  Year  \\\n",
       "0                           1             $800 to $1,499     2018  2018   \n",
       "1                           5  No Real Estate Taxes Paid     2018  2018   \n",
       "2                           0             Less Than $800     2018  2018   \n",
       "3                           3           $2,000 to $2,999     2018  2018   \n",
       "4                           1             $800 to $1,499     2018  2018   \n",
       "..                        ...                        ...      ...   ...   \n",
       "67                          2           $1,500 to $1,999     2013  2013   \n",
       "68                          2           $1,500 to $1,999     2013  2013   \n",
       "69                          4             $3,000 or More     2013  2013   \n",
       "70                          1             $800 to $1,499     2013  2013   \n",
       "71                          0             Less Than $800     2013  2013   \n",
       "\n",
       "    Real Estate Taxes by Mortgage  Real Estate Taxes by Mortgage Moe  \\\n",
       "0                            8332                        1220.172119   \n",
       "1                            1326                         506.411888   \n",
       "2                        10920375                       55918.756969   \n",
       "3                            8477                        1296.834608   \n",
       "4                        12785402                       66415.014462   \n",
       "..                            ...                                ...   \n",
       "67                        7341688                       41048.786974   \n",
       "68                           4910                         948.008439   \n",
       "69                       24886195                       72858.254742   \n",
       "70                          13671                        1557.206794   \n",
       "71                           8694                        1369.415204   \n",
       "\n",
       "            Geography    ID Geography    Slug Geography     share  \n",
       "0   San Francisco, CA  16000US0667000  san-francisco-ca  0.061156  \n",
       "1   San Francisco, CA  16000US0667000  san-francisco-ca  0.009733  \n",
       "2       United States         01000US     united-states  0.140530  \n",
       "3   San Francisco, CA  16000US0667000  san-francisco-ca  0.062220  \n",
       "4       United States         01000US     united-states  0.164531  \n",
       "..                ...             ...               ...       ...  \n",
       "67      United States         01000US     united-states  0.099422  \n",
       "68  San Francisco, CA  16000US0667000  san-francisco-ca  0.038597  \n",
       "69      United States         01000US     united-states  0.337011  \n",
       "70  San Francisco, CA  16000US0667000  san-francisco-ca  0.107467  \n",
       "71  San Francisco, CA  16000US0667000  san-francisco-ca  0.068343  \n",
       "\n",
       "[72 rows x 10 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4 = pd.read_csv(\"sanfran_proptax.csv\")\n",
    "df4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Property Tax</th>\n",
       "      <th>Year</th>\n",
       "      <th>Number of People</th>\n",
       "      <th>Geography</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>$800 to $1,499</td>\n",
       "      <td>2018</td>\n",
       "      <td>8332</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>No Real Estate Taxes Paid</td>\n",
       "      <td>2018</td>\n",
       "      <td>1326</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Less Than $800</td>\n",
       "      <td>2018</td>\n",
       "      <td>10920375</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>$2,000 to $2,999</td>\n",
       "      <td>2018</td>\n",
       "      <td>8477</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>$800 to $1,499</td>\n",
       "      <td>2018</td>\n",
       "      <td>12785402</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>$1,500 to $1,999</td>\n",
       "      <td>2013</td>\n",
       "      <td>7341688</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>$1,500 to $1,999</td>\n",
       "      <td>2013</td>\n",
       "      <td>4910</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>$3,000 or More</td>\n",
       "      <td>2013</td>\n",
       "      <td>24886195</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>$800 to $1,499</td>\n",
       "      <td>2013</td>\n",
       "      <td>13671</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>Less Than $800</td>\n",
       "      <td>2013</td>\n",
       "      <td>8694</td>\n",
       "      <td>San Francisco, CA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>72 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Property Tax  Year  Number of People          Geography\n",
       "0              $800 to $1,499  2018              8332  San Francisco, CA\n",
       "1   No Real Estate Taxes Paid  2018              1326  San Francisco, CA\n",
       "2              Less Than $800  2018          10920375      United States\n",
       "3            $2,000 to $2,999  2018              8477  San Francisco, CA\n",
       "4              $800 to $1,499  2018          12785402      United States\n",
       "..                        ...   ...               ...                ...\n",
       "67           $1,500 to $1,999  2013           7341688      United States\n",
       "68           $1,500 to $1,999  2013              4910  San Francisco, CA\n",
       "69             $3,000 or More  2013          24886195      United States\n",
       "70             $800 to $1,499  2013             13671  San Francisco, CA\n",
       "71             Less Than $800  2013              8694  San Francisco, CA\n",
       "\n",
       "[72 rows x 4 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.rename(columns={'Real Estate Taxes Paid':'Property Tax', 'Real Estate Taxes by Mortgage':'Number of People'}, inplace=True)\n",
    "df4 = df4.filter(['Property Tax', 'Year', 'Number of People', 'Geography'])\n",
    "df4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['$800 to $1,499', 'No Real Estate Taxes Paid', '$2,000 to $2,999',\n",
       "       '$1,500 to $1,999', '$3,000 or More', 'Less Than $800'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df5 = df4[df4['Geography'] != 'United States']\n",
    "df_usa2 = df4[df4['Geography'] == 'United States']\n",
    "df5['Property Tax'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\python\\python37\\lib\\site-packages\\pandas\\core\\generic.py:6746: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._update_inplace(new_data)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Property Tax</th>\n",
       "      <th>Year</th>\n",
       "      <th>Number of People</th>\n",
       "      <th>Geography</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>2018</td>\n",
       "      <td>10920375</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>2018</td>\n",
       "      <td>12785402</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Between $1500 and $3000</td>\n",
       "      <td>2018</td>\n",
       "      <td>7420205</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Between $1500 and $3000</td>\n",
       "      <td>2018</td>\n",
       "      <td>11882220</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>2018</td>\n",
       "      <td>3235342</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Greater than $3000</td>\n",
       "      <td>2018</td>\n",
       "      <td>31464850</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>2017</td>\n",
       "      <td>11233460</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Between $1500 and $3000</td>\n",
       "      <td>2017</td>\n",
       "      <td>7428430</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>2017</td>\n",
       "      <td>13053304</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Between $1500 and $3000</td>\n",
       "      <td>2017</td>\n",
       "      <td>11879515</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>2017</td>\n",
       "      <td>3096474</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Greater than $3000</td>\n",
       "      <td>2017</td>\n",
       "      <td>29992835</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Greater than $3000</td>\n",
       "      <td>2016</td>\n",
       "      <td>28308224</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Between $1500 and $3000</td>\n",
       "      <td>2016</td>\n",
       "      <td>11657232</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>2016</td>\n",
       "      <td>11453745</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>2016</td>\n",
       "      <td>3022454</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Between $1500 and $3000</td>\n",
       "      <td>2016</td>\n",
       "      <td>7444572</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>2016</td>\n",
       "      <td>13136342</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>2015</td>\n",
       "      <td>2989475</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>2015</td>\n",
       "      <td>11874322</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>2015</td>\n",
       "      <td>13422342</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Between $1500 and $3000</td>\n",
       "      <td>2015</td>\n",
       "      <td>7457994</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Greater than $3000</td>\n",
       "      <td>2015</td>\n",
       "      <td>27144833</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Between $1500 and $3000</td>\n",
       "      <td>2015</td>\n",
       "      <td>11617546</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>2014</td>\n",
       "      <td>13435923</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>2014</td>\n",
       "      <td>3365156</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>Between $1500 and $3000</td>\n",
       "      <td>2014</td>\n",
       "      <td>11386913</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>Between $1500 and $3000</td>\n",
       "      <td>2014</td>\n",
       "      <td>7247931</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>Greater than $3000</td>\n",
       "      <td>2014</td>\n",
       "      <td>25513711</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>2014</td>\n",
       "      <td>13042361</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>2013</td>\n",
       "      <td>3307428</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>2013</td>\n",
       "      <td>13616142</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>2013</td>\n",
       "      <td>13283126</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>Between $1500 and $3000</td>\n",
       "      <td>2013</td>\n",
       "      <td>11409282</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>Between $1500 and $3000</td>\n",
       "      <td>2013</td>\n",
       "      <td>7341688</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>Greater than $3000</td>\n",
       "      <td>2013</td>\n",
       "      <td>24886195</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Property Tax  Year  Number of People      Geography\n",
       "2           Less than $1500  2018          10920375  United States\n",
       "4           Less than $1500  2018          12785402  United States\n",
       "7   Between $1500 and $3000  2018           7420205  United States\n",
       "9   Between $1500 and $3000  2018          11882220  United States\n",
       "10          Less than $1500  2018           3235342  United States\n",
       "11       Greater than $3000  2018          31464850  United States\n",
       "12          Less than $1500  2017          11233460  United States\n",
       "13  Between $1500 and $3000  2017           7428430  United States\n",
       "16          Less than $1500  2017          13053304  United States\n",
       "18  Between $1500 and $3000  2017          11879515  United States\n",
       "21          Less than $1500  2017           3096474  United States\n",
       "23       Greater than $3000  2017          29992835  United States\n",
       "25       Greater than $3000  2016          28308224  United States\n",
       "28  Between $1500 and $3000  2016          11657232  United States\n",
       "29          Less than $1500  2016          11453745  United States\n",
       "30          Less than $1500  2016           3022454  United States\n",
       "32  Between $1500 and $3000  2016           7444572  United States\n",
       "34          Less than $1500  2016          13136342  United States\n",
       "36          Less than $1500  2015           2989475  United States\n",
       "38          Less than $1500  2015          11874322  United States\n",
       "42          Less than $1500  2015          13422342  United States\n",
       "44  Between $1500 and $3000  2015           7457994  United States\n",
       "45       Greater than $3000  2015          27144833  United States\n",
       "46  Between $1500 and $3000  2015          11617546  United States\n",
       "48          Less than $1500  2014          13435923  United States\n",
       "50          Less than $1500  2014           3365156  United States\n",
       "53  Between $1500 and $3000  2014          11386913  United States\n",
       "54  Between $1500 and $3000  2014           7247931  United States\n",
       "58       Greater than $3000  2014          25513711  United States\n",
       "59          Less than $1500  2014          13042361  United States\n",
       "61          Less than $1500  2013           3307428  United States\n",
       "62          Less than $1500  2013          13616142  United States\n",
       "63          Less than $1500  2013          13283126  United States\n",
       "65  Between $1500 and $3000  2013          11409282  United States\n",
       "67  Between $1500 and $3000  2013           7341688  United States\n",
       "69       Greater than $3000  2013          24886195  United States"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def categ_sect2(d):\n",
    "    d['Property Tax'].replace({'$800 to $1,499': 'Less than $1500',\n",
    "                                 'No Real Estate Taxes Paid': 'Less than $1500',\n",
    "                                 '$2,000 to $2,999': 'Between $1500 and $3000',\n",
    "                                 '$1,500 to $1,999': 'Between $1500 and $3000',\n",
    "                                 '$3,000 or More': 'Greater than $3000',\n",
    "                                 'Less Than $800': 'Less than $1500'\n",
    "                              },\n",
    "                              inplace=True)\n",
    "\n",
    "    return d\n",
    "categ_sect2(df5)\n",
    "categ_sect2(df_usa2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\python\\python37\\lib\\site-packages\\ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Year\n",
       "2013     86927\n",
       "2014     94968\n",
       "2015     96172\n",
       "2016    103005\n",
       "2017    100671\n",
       "2018    111014\n",
       "Name: Number of People, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df5['Number of People'] = df5['Number of People'].apply(lambda x: int(x))\n",
    "\n",
    "categ2 = pd.DataFrame()\n",
    "for i in range(6):\n",
    "    if categ2.empty:\n",
    "        categ2 = df5[df5['Year'] == df5['Year'].unique()[i]].groupby('Property Tax').agg({'Number of People': np.sum}).reset_index()\n",
    "        categ2['Year'] = df3['Year'].unique()[i]\n",
    "    else:\n",
    "        tmp = df5[df5['Year'] == df5['Year'].unique()[i]].groupby('Property Tax').agg({'Number of People': np.sum}).reset_index()\n",
    "        tmp['Year'] = df5['Year'].unique()[i]\n",
    "        categ2 = pd.concat([tmp, categ2])\n",
    "#categ.set_index('Year', inplace=True)\n",
    "categ2['City'] = df5['Geography'][0]\n",
    "categ2 = categ2.groupby('Year').apply(pd.DataFrame.sort_values, 'Number of People')\n",
    "categ2.reset_index(drop=True, inplace=True)\n",
    "categ2.set_index('Year', inplace=True)\n",
    "categ2[categ2['Property Tax'] == 'Greater than $3000']['Number of People']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\python\\python37\\lib\\site-packages\\ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Property Tax</th>\n",
       "      <th>Number of People</th>\n",
       "      <th>City</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2013</th>\n",
       "      <td>Between $1500 and $3000</td>\n",
       "      <td>18750970</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013</th>\n",
       "      <td>Greater than $3000</td>\n",
       "      <td>24886195</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>30206696</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014</th>\n",
       "      <td>Between $1500 and $3000</td>\n",
       "      <td>18634844</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014</th>\n",
       "      <td>Greater than $3000</td>\n",
       "      <td>25513711</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>29843440</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015</th>\n",
       "      <td>Between $1500 and $3000</td>\n",
       "      <td>19075540</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015</th>\n",
       "      <td>Greater than $3000</td>\n",
       "      <td>27144833</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>28286139</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016</th>\n",
       "      <td>Between $1500 and $3000</td>\n",
       "      <td>19101804</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>27612541</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016</th>\n",
       "      <td>Greater than $3000</td>\n",
       "      <td>28308224</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017</th>\n",
       "      <td>Between $1500 and $3000</td>\n",
       "      <td>19307945</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>27383238</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017</th>\n",
       "      <td>Greater than $3000</td>\n",
       "      <td>29992835</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018</th>\n",
       "      <td>Between $1500 and $3000</td>\n",
       "      <td>19302425</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018</th>\n",
       "      <td>Less than $1500</td>\n",
       "      <td>26941119</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018</th>\n",
       "      <td>Greater than $3000</td>\n",
       "      <td>31464850</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Property Tax  Number of People           City\n",
       "Year                                                          \n",
       "2013  Between $1500 and $3000          18750970  United States\n",
       "2013       Greater than $3000          24886195  United States\n",
       "2013          Less than $1500          30206696  United States\n",
       "2014  Between $1500 and $3000          18634844  United States\n",
       "2014       Greater than $3000          25513711  United States\n",
       "2014          Less than $1500          29843440  United States\n",
       "2015  Between $1500 and $3000          19075540  United States\n",
       "2015       Greater than $3000          27144833  United States\n",
       "2015          Less than $1500          28286139  United States\n",
       "2016  Between $1500 and $3000          19101804  United States\n",
       "2016          Less than $1500          27612541  United States\n",
       "2016       Greater than $3000          28308224  United States\n",
       "2017  Between $1500 and $3000          19307945  United States\n",
       "2017          Less than $1500          27383238  United States\n",
       "2017       Greater than $3000          29992835  United States\n",
       "2018  Between $1500 and $3000          19302425  United States\n",
       "2018          Less than $1500          26941119  United States\n",
       "2018       Greater than $3000          31464850  United States"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df5['Number of People'] = df5['Number of People'].apply(lambda x: int(x))\n",
    "\n",
    "categ3 = pd.DataFrame()\n",
    "for i in range(6):\n",
    "    if categ3.empty:\n",
    "        categ3 = df_usa2[df_usa2['Year'] == df_usa2['Year'].unique()[i]].groupby('Property Tax').agg({'Number of People': np.sum}).reset_index()\n",
    "        categ3['Year'] = df_usa2['Year'].unique()[i]\n",
    "    else:\n",
    "        tmp = df_usa2[df_usa2['Year'] == df_usa2['Year'].unique()[i]].groupby('Property Tax').agg({'Number of People': np.sum}).reset_index()\n",
    "        tmp['Year'] = df_usa2['Year'].unique()[i]\n",
    "        categ3 = pd.concat([tmp, categ3])\n",
    "#categ.set_index('Year', inplace=True)\n",
    "categ3['City'] = df4['Geography'][2]\n",
    "categ3 = categ3.groupby('Year').apply(pd.DataFrame.sort_values, 'Number of People')\n",
    "categ3.reset_index(drop=True, inplace=True)\n",
    "categ3.set_index('Year', inplace=True)\n",
    "categ3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'San Francisco'"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_startup = pd.read_csv(\"startup.csv\")\n",
    "end = df3['Geography'][0].index(',')\n",
    "df_startup = df_startup[df_startup['City'] == df3['Geography'][0][0:end]]\n",
    "city = df_startup['City'][0]\n",
    "city"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series([], Name: Number of People, dtype: int64)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "categ2[categ2['Property Tax'] == 'Greater Than $2000']['Number of People']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'U.S Annual Average Property Tax')"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x576 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import mplcursors\n",
    "import matplotlib.gridspec as gridspec\n",
    "\n",
    "fig = plt.figure()\n",
    "fig.set_figwidth(18)\n",
    "fig.set_figheight(8)\n",
    "gspec = gridspec.GridSpec(200, 2)\n",
    "\n",
    "bottom1 = plt.subplot(gspec[50:, 0:1])\n",
    "top1 = plt.subplot(gspec[0:30,0:1])\n",
    "bottom2 = plt.subplot(gspec[50:, 1:])\n",
    "top2 = plt.subplot(gspec[0:30,1:])\n",
    "\n",
    "\n",
    "poor = categ[categ['Income'] == 'Less than $75,000']['Number of People']\n",
    "middle = categ[categ['Income'] == 'Between $75,000 and $150,000']['Number of People']\n",
    "upper = categ[categ['Income'] == 'Greater than $150,000']['Number of People']\n",
    "\n",
    "low = categ2[categ2['Property Tax'] == 'Less than $1500']['Number of People']\n",
    "medium = categ2[categ2['Property Tax'] == 'Between $1500 and $3000']['Number of People']\n",
    "high = categ2[categ2['Property Tax'] == 'Greater than $3000']['Number of People']\n",
    "\n",
    "# Left\n",
    "y1 = poor\n",
    "y2 = middle\n",
    "y3 = upper\n",
    "x = categ[categ['Income'] == 'Less than $75,000'].index\n",
    "\n",
    "y4 = categ1[categ1['Income'] == 'Less than $75,000']['Number of People']\n",
    "y5 = categ1[categ1['Income'] == 'Between $75,000 and $150,000']['Number of People']\n",
    "y6 = categ1[categ1['Income'] == 'Greater than $150,000']['Number of People'] \n",
    "\n",
    "bottom1.bar(x+0.25, y3, width=0.25, color=sns.xkcd_rgb[\"magenta\"], alpha=0.75, align='center', picker=5, label='Greater than 150K')\n",
    "bottom1.bar(x, y2, width=0.25, color=sns.xkcd_rgb[\"mint\"], alpha=0.8, align='center', picker=5, label='Between 75K and 150K')\n",
    "bottom1.bar(x-0.25, y1, width=0.25, color=sns.xkcd_rgb[\"teal blue\"], alpha=0.6, align='center', picker=5, label='Less than 75K')\n",
    "bottom1.legend()\n",
    "bottom1.set_title(\"{} Annual Average Income vs Number of Startups\".format(city))\n",
    "bottom1.set_ylabel(\"Annual Average Salary ($)\")\n",
    "bottom1.set_xlabel(\"Year\")\n",
    "\n",
    "start = fig.add_subplot(2,2,3, sharex=bottom1, frameon=False)\n",
    "start.plot(x, df_startup['Number of Startups'], '-o', color=sns.xkcd_rgb[\"banana\"], alpha=0.9, label='Number of Startups')\n",
    "start.yaxis.tick_right()\n",
    "start.yaxis.set_ticks(range(0, 1600, 400))\n",
    "start.legend()\n",
    "\n",
    "top1.plot(x, y6, color=sns.xkcd_rgb[\"teal blue\"])\n",
    "top1.plot(x, y5, color=sns.xkcd_rgb[\"mint\"])\n",
    "top1.plot(x, y4, color=sns.xkcd_rgb[\"magenta\"])\n",
    "top1.set_xticks([], [])\n",
    "top1.set_yticks([], [])\n",
    "top1.spines['top'].set_visible(False)\n",
    "top1.spines['bottom'].set_visible(False)\n",
    "top1.spines['right'].set_visible(False)\n",
    "top1.spines['left'].set_visible(False)\n",
    "top1.set_title(\"U.S Annual Average Salary\")\n",
    "\n",
    "#Right\n",
    "y7 = low\n",
    "y8 = medium\n",
    "y9 = high\n",
    "\n",
    "y10 = categ3[categ3['Property Tax'] == 'Less than $1500']['Number of People']\n",
    "y11 = categ3[categ3['Property Tax'] == 'Between $1500 and $3000']['Number of People']\n",
    "y12 = categ3[categ3['Property Tax'] == 'Greater than $3000']['Number of People'] \n",
    "\n",
    "bottom2.bar(x+0.25, y9, width=0.25, color=sns.xkcd_rgb[\"magenta\"], alpha=0.75, align='center', picker=5, label='Greater than 2K')\n",
    "bottom2.bar(x, y8, width=0.25, color=sns.xkcd_rgb[\"mint\"], alpha=0.8, align='center', picker=5, label='Between 1K and 2K')\n",
    "bottom2.bar(x-0.25, y7, width=0.25, color=sns.xkcd_rgb[\"teal blue\"], alpha=0.6, align='center', picker=5, label='Less than 1K')\n",
    "bottom2.legend()\n",
    "bottom2.set_title(\"{} Annual Average Property Tax vs Number of Startups\".format(city))\n",
    "bottom2.set_xlabel(\"Year\")\n",
    "\n",
    "start1 = fig.add_subplot(2,2,4, sharex=bottom2, frameon=False)\n",
    "start1.plot(x, df_startup['Number of Startups'], '-o', color=sns.xkcd_rgb[\"banana\"], alpha=0.9, label='Number of Startups')\n",
    "start1.yaxis.tick_right()\n",
    "start1.yaxis.set_ticks(range(0, 1600, 400))\n",
    "start1.legend()\n",
    "start1.yaxis.set_label_position(\"right\")\n",
    "start1.set_ylabel(\"Number of Startups\")\n",
    "\n",
    "top2.plot(x, y10, color=sns.xkcd_rgb[\"teal blue\"])\n",
    "top2.plot(x, y11, color=sns.xkcd_rgb[\"mint\"])\n",
    "top2.plot(x, y12, color=sns.xkcd_rgb[\"magenta\"])\n",
    "top2.set_xticks([], [])\n",
    "top2.set_yticks([], [])\n",
    "top2.spines['top'].set_visible(False)\n",
    "top2.spines['bottom'].set_visible(False)\n",
    "top2.spines['right'].set_visible(False)\n",
    "top2.spines['left'].set_visible(False)\n",
    "top2.set_title(\"U.S Annual Average Property Tax\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 700,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
